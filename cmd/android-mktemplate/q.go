package main

import (
	"encoding/json"
	"fmt"
	"os"
)

type Config struct {
	Description             string            `json:"_description"`
	ApplicationBinary       string            `json:"application-binary"`
	Architectures           map[string]string `json:"architectures"`
	AndroidExtraLibs        string            `json:"android-extra-libs"`
	AndroidMinSDKVersion    string            `json:"android-min-sdk-version"`
	AndroidTargetSDKVersion string            `json:"android-target-sdk-version"`
	NDK                     string            `json:"ndk"`
	NDKHost                 string            `json:"ndk-host"`
	Qt                      string            `json:"qt"`
	SDK                     string            `json:"sdk"`
	SdkBuildToolsRevision   string            `json:"sdkBuildToolsRevision"`
	StdcppPath              string            `json:"stdcpp-path"`
	ToolPrefix              string            `json:"tool-prefix"`
	ToolchainPrefix         string            `json:"toolchain-prefix"`
	UseLLVM                 bool              `json:"useLLVM"`
}

func main() {
	os.Args = []string{"", "myapp", "android_deployment_settings.json"}

	if len(os.Args) != 3 {
		fmt.Fprintf(os.Stderr, "Usage: %s appname output.json\n", os.Args[0])
		os.Exit(1)
	}

	appName := os.Args[1]
	outputFile := os.Args[2]

	// 假设 Qt 和 NDK 的路径
	qtPath := "D:\\Qt\\6.9.0\\android_arm64_v8a\\"
	ndkPath := "D:\\Admin\\sdk\\ndk-bundle\\"

	config := Config{
		Description:             "Generated by miqt/android-mktemplate",
		ApplicationBinary:       appName,
		Architectures:           map[string]string{"arm64-v8a": "aarch64-linux-android"},
		AndroidExtraLibs:        "/opt/android_openssl/ssl_1.1/arm64-v8a/libssl_1_1.so,/opt/android_openssl/ssl_1.1/arm64-v8a/libcrypto_1_1.so",
		AndroidMinSDKVersion:    "23",
		AndroidTargetSDKVersion: "30",
		NDK:                     ndkPath,
		NDKHost:                 "windows-x86_64",
		Qt:                      qtPath,
		SDK:                     "D:\\Admin\\sdk\\",
		SdkBuildToolsRevision:   "30.0.2",
		StdcppPath:              ndkPath + "toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/lib/",
		ToolPrefix:              "llvm",
		ToolchainPrefix:         "llvm",
		UseLLVM:                 true,
	}

	// 打开或创建文件
	file, err := os.Create(outputFile)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to create file: %s\n", err)
		os.Exit(1)
	}
	defer file.Close()

	// 将配置写入 JSON 文件
	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "    ") // 设置缩进以便 JSON 文件更易读
	err = encoder.Encode(config)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to encode JSON: %s\n", err)
		os.Exit(1)
	}

	fmt.Println("JSON configuration file generated successfully.")
}
